spring.config.import= ${file:dev.properties}
server.port = ${SERVER_PORT}
server.error.include-binding-errors = always
server.error.include-message = always
server.error.include-stacktrace = never
spring.datasource.url = ${DATABASE_URL}
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name= ${DATABASE_DRIVER}
spring.jpa.hibernate.ddl-auto= ${DATABASE_DDL_AUTO}
spring.jpa.properties.hibernate.dialect=${DATABASE_PLATFORM}
spring.jpa.properties.hibernate.format_sql= true
spring.jpa.show-sql =true
spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER
#ANT_PATH_MATCHER: This is a path matching strategy based on the Ant-style path patterns.
# Ant-style patterns are often used for matching and filtering strings. In the context of
# Spring MVC, these patterns are used for mapping request URLs to controller methods.
#For example, an Ant-style pattern might look like /api/**, where ** is a wildcard that
# matches any number of path segments. This pattern would match paths like /api/user, /api/product, etc.
#By setting spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER, you're telling Spring MVC to use the Ant-style path matcher for handling URL path patterns.
backendapi.app.jwtSecret = realestateproject
backendapi.app.jwtExpirationMs = 8640000